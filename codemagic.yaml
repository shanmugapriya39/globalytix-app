workflows:
  ios_auto_sign:
    name: "iOS â€¢ Auto signing via ASC"
    environment:
      xcode: 16.4
      cocoapods: default
      groups:
        - appstore   # APP_STORE_CONNECT_PRIVATE_KEY_B64, CERTIFICATE_PRIVATE_KEY_B64, APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER
      vars:
        BUNDLE_ID: "com.globalytix.app"
        XCODE_PROJECT: "YourApp.xcworkspace"   # or "YourApp.xcodeproj" if no CocoaPods
        XCODE_SCHEME: "YourScheme"
        EXPORT_METHOD: "app-store"

    cache:
      cache_paths:
        - "~/Library/Caches/CocoaPods"
        - "~/Library/Developer/Xcode/DerivedData"

    scripts:
      - name: "Sanity: YAML loaded + vars"
        script: |
          set -euo pipefail
          echo "Branch: ${CM_BRANCH:-<unknown>}"
          echo "BUNDLE_ID=$BUNDLE_ID"
          echo "XCODE_PROJECT=$XCODE_PROJECT"
          echo "XCODE_SCHEME=$XCODE_SCHEME"
          for v in APP_STORE_CONNECT_PRIVATE_KEY_B64 CERTIFICATE_PRIVATE_KEY_B64 APP_STORE_CONNECT_ISSUER_ID APP_STORE_CONNECT_KEY_IDENTIFIER; do
            [ -n "${!v:-}" ] || { echo "Missing required variable: $v"; exit 1; }
          done

      - name: "Decode keys (normalize) + fetch signing files"
        script: |
          set -euo pipefail
          : "${APP_STORE_CONNECT_PRIVATE_KEY_B64:?missing APP_STORE_CONNECT_PRIVATE_KEY_B64}"
          : "${CERTIFICATE_PRIVATE_KEY_B64:?missing CERTIFICATE_PRIVATE_KEY_B64}"
          : "${APP_STORE_CONNECT_ISSUER_ID:?missing APP_STORE_CONNECT_ISSUER_ID}"
          : "${APP_STORE_CONNECT_KEY_IDENTIFIER:?missing APP_STORE_CONNECT_KEY_IDENTIFIER}"

          # 1) Decode to files
          echo "$APP_STORE_CONNECT_PRIVATE_KEY_B64" | base64 --decode > asc_key_win.p8
          echo "$CERTIFICATE_PRIVATE_KEY_B64"      | base64 --decode > cert_win.key

          # 2) Normalize CRLF -> LF
          tr -d '\r' < asc_key_win.p8 > asc_key.p8
          tr -d '\r' < cert_win.key  > cert.key

          # 3) Fix glued PEMs (END...BEGIN) and ensure trailing newline (python -c one-liner)
          python3 -c "import re,sys; p=open('asc_key.p8','rb').read().decode('utf-8','ignore'); p=re.sub(r'-----END PRIVATE KEY-----\\s*-----BEGIN','-----END PRIVATE KEY-----\\n-----BEGIN',p); open('asc_key.p8','wb').write((p.rstrip('\\n')+'\\n').encode()); k=open('cert.key','rb').read().decode('utf-8','ignore'); open('cert.key','wb').write((k.rstrip('\\n')+'\\n').encode())"

          # 4) Validate headers (fixed-string grep)
          head -2 asc_key.p8; tail -2 asc_key.p8
          head -2 cert.key;   tail -2 cert.key
          head -1 asc_key.p8 | grep -Fxq -- "-----BEGIN PRIVATE KEY-----"      || { echo "asc_key.p8: missing BEGIN PRIVATE KEY"; exit 1; }
          tail -1 asc_key.p8 | grep -Fxq -- "-----END PRIVATE KEY-----"        || { echo "asc_key.p8: missing END PRIVATE KEY";   exit 1; }
          head -1 cert.key   | grep -Fxq -- "-----BEGIN RSA PRIVATE KEY-----"  || { echo "cert.key:   missing BEGIN RSA PRIVATE KEY"; exit 1; }
          tail -1 cert.key   | grep -Fxq -- "-----END RSA PRIVATE KEY-----"    || { echo "cert.key:   missing END RSA PRIVATE KEY";   exit 1; }

          # 5) Fetch cert + provisioning profile (auto-create)
          app-store-connect fetch-signing-files "$BUNDLE_ID" \
            --type IOS_APP_STORE \
            --create \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$(cat asc_key.p8)" \
            --certificate-key "$(cat cert.key)"

      - name: "Resolve dependencies (CocoaPods)"
        script: |
          if [ -f "Podfile" ]; then
            pod repo update
            pod install
          fi

      - name: "Build and export IPA"
        script: |
          set -euo pipefail
          if [[ "$XCODE_PROJECT" == *.xcworkspace ]]; then
            xcode-project build-ipa \
              --workspace "$XCODE_PROJECT" \
              --scheme "$XCODE_SCHEME" \
              --archive-configuration "Release" \
              --export-method "$EXPORT_METHOD"
          else
            xcode-project build-ipa \
              --project "$XCODE_PROJECT" \
              --scheme "$XCODE_SCHEME" \
              --archive-configuration "Release" \
              --export-method "$EXPORT_METHOD"
          fi

    artifacts:
      - "$CM_EXPORT_DIR/*.ipa"
      - "$CM_EXPORT_DIR/*.dSYM.zip"
      - "$CM_EXPORT_DIR/export-options.plist"
      - "~/Library/Logs/gym/*.log"
